# 퀴즈앱 PRD (Product Requirements Document)

## 1. 프로젝트 개요

### 1.1 프로젝트명
웹 기반 퀴즈 애플리케이션

### 1.2 목적
사용자가 다양한 주제의 퀴즈를 풀고, 점수를 확인하며, 개인 기록을 관리할 수 있는 간단한 웹 애플리케이션 개발

### 1.3 기술 스택
- Frontend: HTML5, CSS3, JavaScript (Vanilla)
- 데이터 저장: localStorage (브라우저 로컬 저장소)
- 반응형 웹 디자인

## 2. 핵심 기능 요구사항

### 2.1 필수 기능 (Core Features)

#### 2.1.1 퀴즈 게임 기능
- **문제 출제**: 객관식 문제 (4지선다) 형태
- **문제 카테고리**: 일반상식, 역사, 과학, 스포츠 등 최소 3개 카테고리
- **답안 선택**: 라디오 버튼 또는 버튼 형태로 답 선택
- **즉시 피드백**: 정답/오답 여부 즉시 표시
- **점수 계산**: 정답 개수에 따른 점수 산출

#### 2.1.2 게임 플로우
- **시작 화면**: 카테고리 선택 및 게임 시작
- **문제 화면**: 문제, 선택지, 진행률 표시
- **결과 화면**: 최종 점수, 정답률, 소요시간 표시
- **재시작 기능**: 같은 카테고리 또는 다른 카테고리로 재시작

#### 2.1.3 데이터 관리
- **기록 저장**: localStorage를 이용한 게임 기록 저장
- **최고 기록**: 카테고리별 최고 점수 기록
- **최근 게임**: 최근 5회 게임 결과 저장
- **통계**: 총 게임 횟수, 평균 점수 등

### 2.2 부가 기능 (Additional Features)

#### 2.2.1 사용자 경험 개선
- **타이머**: 문제당 제한시간 (선택사항)
- **진행률 표시**: 현재 문제 번호/전체 문제 수
- **음향 효과**: 정답/오답 시 간단한 사운드 (선택사항)
- **애니메이션**: 부드러운 화면 전환 효과

#### 2.2.2 관리 기능
- **문제 추가**: 관리자 모드에서 새 문제 추가 가능
- **기록 초기화**: 저장된 기록 삭제 기능
- **설정**: 문제 개수, 시간 제한 등 게임 설정

## 3. 기술적 요구사항

### 3.1 성능 요구사항
- **로딩 시간**: 3초 이내 초기 로딩 완료
- **반응 속도**: 버튼 클릭 후 1초 이내 반응
- **호환성**: Chrome, Firefox, Safari, Edge 최신 버전 지원

### 3.2 데이터 구조
```javascript
// localStorage 데이터 구조 예시
{
  quizData: [
    {
      category: "일반상식",
      question: "대한민국의 수도는?",
      options: ["서울", "부산", "대구", "인천"],
      correct: 0
    }
  ],
  gameHistory: [
    {
      date: "2025-06-02",
      category: "일반상식",
      score: 8,
      totalQuestions: 10,
      timeSpent: 120
    }
  ],
  bestScores: {
    "일반상식": 9,
    "역사": 7,
    "과학": 6
  }
}
```

### 3.3 반응형 디자인
- **모바일**: 320px ~ 768px
- **태블릿**: 768px ~ 1024px
- **데스크톱**: 1024px 이상

## 4. 사용자 인터페이스 요구사항

### 4.1 화면 구성
1. **홈 화면**: 로고, 카테고리 선택, 기록 보기 버튼
2. **게임 화면**: 문제, 선택지, 진행률, 시간 (선택사항)
3. **결과 화면**: 점수, 정답률, 소요시간, 재시작 버튼
4. **기록 화면**: 최고 기록, 최근 게임, 통계

### 4.2 디자인 가이드라인
- **색상**: 주색상 1개, 보조색상 2개로 간단한 컬러 팔레트
- **폰트**: 가독성 좋은 sans-serif 폰트
- **버튼**: 명확한 클릭 영역과 호버 효과
- **레이아웃**: 깔끔하고 직관적인 구성

## 5. 개발 태스크 (라이브코딩용)

### 5.1 기본 구조 태스크
**T1. HTML 기본 구조**
- [ ] index.html 생성 및 기본 마크업
- [ ] 홈 화면 HTML 구조
- [ ] 게임 화면 HTML 구조  
- [ ] 결과 화면 HTML 구조
- [ ] 기록 화면 HTML 구조

**T2. CSS 스타일링**
- [ ] 기본 CSS 리셋 및 전역 스타일
- [ ] 버튼 및 폼 요소 스타일
- [ ] 레이아웃 및 그리드 시스템
- [ ] 반응형 미디어 쿼리
- [ ] 애니메이션 및 전환 효과

### 5.2 데이터 및 로직 태스크
**T3. 문제 데이터베이스**
- [ ] 문제 데이터 JSON 구조 설계
- [ ] 카테고리별 샘플 문제 작성 (각 10문제)
- [ ] 문제 검증 함수 구현

**T4. 게임 로직**
- [ ] 퀴즈 게임 클래스/객체 구조 설계
- [ ] 문제 랜덤 선택 로직
- [ ] 답안 체크 및 점수 계산
- [ ] 타이머 기능 (선택사항)
- [ ] 게임 진행 상태 관리

**T5. 데이터 저장소 (localStorage 대체)**
- [ ] 메모리 기반 데이터 저장 구조
- [ ] 게임 기록 저장/불러오기
- [ ] 최고 점수 관리
- [ ] 통계 데이터 계산

### 5.3 UI 인터랙션 태스크
**T6. 화면 전환**
- [ ] SPA 방식 화면 전환 로직
- [ ] 홈 → 게임 화면 전환
- [ ] 게임 → 결과 화면 전환
- [ ] 네비게이션 기능

**T7. 게임 UI**
- [ ] 문제 및 선택지 렌더링
- [ ] 답안 선택 인터랙션
- [ ] 진행률 표시 업데이트
- [ ] 즉시 피드백 표시

**T8. 결과 및 기록 UI**
- [ ] 게임 결과 화면 렌더링
- [ ] 기록 목록 표시
- [ ] 통계 차트/그래프 (선택사항)

### 5.4 최적화 및 마무리 태스크
**T9. 사용자 경험 개선**
- [ ] 로딩 인디케이터
- [ ] 에러 처리 및 알림
- [ ] 접근성 개선 (키보드 네비게이션 등)
- [ ] 모바일 터치 최적화

**T10. 테스트 및 디버깅**
- [ ] 기능별 테스트 케이스 작성
- [ ] 브라우저 호환성 테스트
- [ ] 반응형 디자인 테스트
- [ ] 성능 최적화

### 5.5 라이브코딩 우선순위
**🔥 고우선순위 (MVP)**
1. T1 - HTML 기본 구조
2. T3 - 문제 데이터베이스 
3. T4 - 게임 로직 (핵심)
4. T6 - 화면 전환
5. T7 - 게임 UI

**⭐ 중우선순위**
6. T2 - CSS 스타일링
7. T5 - 데이터 저장소
8. T8 - 결과 및 기록 UI

**✨ 저우선순위 (시간 허용시)**
9. T9 - 사용자 경험 개선
10. T10 - 테스트 및 디버깅

## 6. 라이브코딩 체크포인트

### 6.1 데모 가능한 단계별 목표
**🎯 Checkpoint 1: 기본 퀴즈 게임**
- 1문제 출제 → 답안 선택 → 정답 확인
- 기본 HTML/CSS 완성
- 핵심 게임 로직 작동

**🎯 Checkpoint 2: 완전한 게임 플로우**
- 10문제 연속 게임 진행
- 점수 계산 및 결과 표시
- 기본 화면 전환

**🎯 Checkpoint 3: 데이터 관리**
- 게임 기록 저장/불러오기
- 카테고리 선택 기능
- 최고 점수 표시

**🎯 Checkpoint 4: 완성된 앱**
- 모든 기능 통합
- 스타일링 완료
- 반응형 디자인

### 6.2 라이브코딩 중 자주 발생하는 이슈 대비
**🐛 예상 이슈 및 해결책**
- **문제**: DOM 조작 타이밍 이슈 → **해결**: DOMContentLoaded 이벤트 활용
- **문제**: 이벤트 리스너 중복 등록 → **해결**: removeEventListener 사용
- **문제**: CSS 레이아웃 깨짐 → **해결**: Flexbox/Grid 기본 패턴 준비
- **문제**: 데이터 상태 관리 복잡성 → **해결**: 간단한 상태 객체 패턴 사용

## 7. 제약사항 및 고려사항

### 7.1 기술적 제약사항
- localStorage 용량 제한 (약 5-10MB)
- 브라우저 데이터 삭제 시 기록 손실 가능
- 서버 없이 클라이언트 사이드만으로 구현

### 7.2 확장 가능성
- 향후 서버 연동으로 사용자 계정 관리
- 멀티플레이어 기능
- 더 다양한 문제 유형 (서술형, 이미지 문제 등)
- 소셜 기능 (점수 공유, 랭킹 등)

## 8. 리스크 및 완화 방안

### 8.1 주요 리스크
- **데이터 손실**: localStorage 특성상 브라우저 데이터 삭제 시 기록 손실
- **브라우저 호환성**: 구형 브라우저에서의 동작 이슈
- **성능**: 대량의 문제 데이터 처리 시 성능 저하

### 8.2 완화 방안
- 데이터 백업/복원 기능 제공
- 점진적 향상(Progressive Enhancement) 적용
- 문제 데이터 최적화 및 지연 로딩 구현