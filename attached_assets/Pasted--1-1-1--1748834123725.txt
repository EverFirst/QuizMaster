# 퀴즈앱 빈칸채우기 기능 추가 스펙

## 1. 기능 개요

### 1.1 목적
기존 객관식 퀴즈에 **빈칸채우기** 문제 유형을 추가하여 사용자의 능동적 참여를 유도하고 다양한 학습 경험 제공

### 1.2 기능 설명
- 문장 중간에 빈칸(`______`)이 있는 문제 출제
- 사용자가 직접 텍스트 입력으로 답안 작성
- 다양한 정답 허용 (동의어, 다른 표현 등)
- 실시간 힌트 제공 시스템

## 2. 핵심 기능 요구사항

### 2.1 문제 구조
```javascript
// 빈칸채우기 문제 데이터 구조
{
  id: 'fb_001',
  type: 'fill_blank',  // 새로운 문제 타입
  category: '역사',
  question: '1945년 8월 15일은 우리나라의 ______ 기념일이다.',
  blank_position: 1,   // 빈칸 위치 (0부터 시작)
  correct_answers: ['광복절', '광복', '해방', '해방절'], // 여러 정답 허용
  hints: [
    '일제강점기가 끝난 날',
    '태극기를 다시 볼 수 있게 된 날'
  ],
  difficulty: 'medium',
  points: 15
}
```

### 2.2 답안 검증 시스템
**🔍 유연한 정답 처리**
- **정확한 일치**: 완전히 같은 답안
- **부분 일치**: 핵심 키워드 포함 여부
- **유사도 검사**: 오타나 띄어쓰기 허용 (Levenshtein Distance)
- **동의어 처리**: 미리 정의된 동의어 목록

**📝 답안 검증 로직**
```javascript
// 답안 검증 함수 예시
function validateAnswer(userAnswer, correctAnswers) {
  const normalized = userAnswer.trim().toLowerCase();
  
  // 1. 정확한 일치
  if (correctAnswers.includes(normalized)) return { correct: true, score: 100 };
  
  // 2. 부분 점수 (유사도 기반)
  const similarity = calculateSimilarity(normalized, correctAnswers);
  if (similarity > 0.8) return { correct: true, score: 80 };
  if (similarity > 0.6) return { correct: false, score: 50, hint: true };
  
  return { correct: false, score: 0 };
}
```

### 2.3 힌트 시스템
- **단계별 힌트**: 첫 시도 실패 시 힌트 제공
- **글자 수 힌트**: 정답의 글자 수 표시
- **첫 글자 힌트**: 정답의 첫 글자 공개
- **카테고리 힌트**: 관련 분야나 주제 제시

## 3. 라이브코딩 개발 태스크

### 3.1 데이터베이스 확장 태스크
**T1. DB 스키마 수정**
- [ ] `questions` 테이블에 `type` 컬럼 추가 (VARCHAR)
- [ ] `questions` 테이블에 `correct_answers` 컬럼 추가 (JSON 배열)
- [ ] `questions` 테이블에 `hints` 컬럼 추가 (JSON 배열)
- [ ] 기존 객관식 문제들의 type을 'multiple_choice'로 업데이트
- [ ] 빈칸채우기 샘플 문제 5개 추가

**T2. API 엔드포인트 확장**
- [ ] 문제 유형별 조회 API 수정
- [ ] 빈칸채우기 답안 검증 API 추가 (`/api/validate-fill-blank`)
- [ ] 힌트 요청 API 추가 (`/api/get-hint`)

### 3.2 프론트엔드 컴포넌트 태스크
**T3. 문제 렌더링 컴포넌트**
- [ ] `FillBlankQuestion.tsx` 컴포넌트 생성
- [ ] 빈칸 위치에 입력 필드 삽입 로직
- [ ] 문장 파싱 및 빈칸 표시 함수
- [ ] 입력 필드 포커스 및 스타일링

**T4. 답안 입력 인터페이스**
- [ ] 실시간 입력 검증 (길이, 특수문자 등)
- [ ] 자동완성 기능 (선택사항)
- [ ] 입력 상태 시각적 피드백
- [ ] 엔터키로 답안 제출

**T5. 힌트 시스템 UI**
- [ ] 힌트 버튼 및 모달 컴포넌트
- [ ] 단계별 힌트 표시 로직
- [ ] 힌트 사용 시 점수 차감 안내
- [ ] 힌트 사용 횟수 제한

### 3.3 게임 로직 확장 태스크
**T6. 문제 유형 분기 처리**
- [ ] 기존 `QuizGame` 컴포넌트에 문제 유형별 렌더링 분기
- [ ] 객관식/빈칸채우기 공통 인터페이스 설계
- [ ] 문제 유형별 점수 계산 로직 분리
- [ ] 타이머 동작 유지 (30초 제한)

**T7. 답안 검증 로직**
- [ ] 클라이언트 사이드 기본 검증
- [ ] 서버 사이드 정답 확인 API 호출
- [ ] 부분 점수 처리 로직
- [ ] 오답 시 정답 표시 기능

**T8. AI 문제 생성 확장**
- [ ] ChatGPT 프롬프트에 빈칸채우기 문제 생성 추가
- [ ] 생성된 문제의 빈칸 위치 자동 감지
- [ ] 다양한 정답 후보 자동 생성
- [ ] 적절한 힌트 자동 생성

### 3.4 사용자 경험 개선 태스크
**T9. 반응형 디자인**
- [ ] 모바일에서 입력 필드 최적화
- [ ] 가상 키보드 대응
- [ ] 터치 인터페이스 개선
- [ ] 접근성 고려 (screen reader 등)

**T10. 게임플레이 개선**
- [ ] 문제 유형 선택 옵션 (설정에서)
- [ ] 문제 유형별 통계 분리
- [ ] 빈칸채우기 전용 카테고리 추가
- [ ] 난이도별 문제 필터링

## 4. 라이브코딩 우선순위

### 4.1 MVP 기능 (1단계)
**🔥 최우선 (30분 목표)**
1. T1 - DB 스키마 수정 및 샘플 데이터
2. T3 - 기본 FillBlankQuestion 컴포넌트
3. T6 - 문제 유형별 렌더링 분기
4. T7 - 기본 답안 검증 로직

### 4.2 핵심 기능 (2단계)
**⭐ 중요 (60분 목표)**
5. T2 - API 엔드포인트 확장
6. T4 - 답안 입력 인터페이스 완성
7. T5 - 기본 힌트 시스템
8. T9 - 모바일 대응

### 4.3 고급 기능 (3단계)
**✨ 향상 (시간 허용 시)**
9. T8 - AI 문제 생성 확장
10. T10 - 게임플레이 개선

## 5. 라이브코딩 체크포인트

### 5.1 데모 가능한 단계별 목표
**🎯 Checkpoint 1: 기본 동작**
- 빈칸채우기 문제 1개 표시
- 텍스트 입력 및 기본 정답 확인
- 정답/오답 피드백

**🎯 Checkpoint 2: 완전한 기능**
- 여러 정답 허용
- 힌트 시스템 동작
- 점수 계산 포함

**🎯 Checkpoint 3: 통합 완료**
- 기존 객관식과 함께 랜덤 출제
- 모든 UI/UX 완성
- 통계 및 기록 정상 동작

## 6. 예상 기술적 이슈 및 해결책

### 6.1 주요 이슈
**🐛 문제점들**
- **한글 입력 처리**: IME 입력 완료 감지
- **정답 유연성**: 너무 관대하거나 엄격한 채점
- **성능**: 실시간 유사도 계산 부하
- **UI 레이아웃**: 빈칸 위치에 따른 레이아웃 깨짐

### 6.2 해결 방안
**💡 해결책들**
- **한글 입력**: `compositionend` 이벤트 활용
- **채점 알고리즘**: 단계별 유사도 기준 설정
- **성능**: 디바운싱 및 클라이언트 사이드 캐싱
- **레이아웃**: CSS Grid/Flexbox 활용한 동적 레이아웃

## 7. 라이브코딩 팁

### 7.1 효율적인 개발 순서
1. **DB부터**: 스키마 변경 후 샘플 데이터 확인
2. **컴포넌트**: 가장 간단한 UI부터 구현
3. **로직**: 정확한 일치부터 → 유연한 매칭으로 확장
4. **통합**: 기존 시스템과의 연동 마지막에

### 7.2 테스트 케이스 준비
```javascript
// 미리 준비할 테스트 케이스들
const testCases = [
  { input: '광복절', expected: true },
  { input: '광복', expected: true },
  { input: '해방', expected: true },
  { input: '광북절', expected: false }, // 오타
  { input: '8.15', expected: false },   // 다른 표현
];
```

이 스펙으로 라이브코딩하면 약 1-2시간 내에 빈칸채우기 기능을 완성할 수 있을 것 같습니다! 🚀